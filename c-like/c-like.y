/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  extern char *yytext;
  fprintf(stderr,"error: line %d: %s at %s\n", 
    yy_mylinenumber, str, yytext);
}



static Program* YY_RESULT_Program_ = 0;
Program* pProgram(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}
Program* pProgram(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

static Function* YY_RESULT_Function_ = 0;
Function* pFunction(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_;
  }
}
Function* pFunction(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_;
  }
}

static ListFunction* YY_RESULT_ListFunction_ = 0;
ListFunction* pListFunction(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunction_;
  }
}
ListFunction* pListFunction(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunction_;
  }
}

static Declaration* YY_RESULT_Declaration_ = 0;
Declaration* pDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declaration_;
  }
}
Declaration* pDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declaration_;
  }
}

static ListDeclaration* YY_RESULT_ListDeclaration_ = 0;
ListDeclaration* pListDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDeclaration_;
  }
}
ListDeclaration* pListDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDeclaration_;
  }
}

static Stmt* YY_RESULT_Stmt_ = 0;
Stmt* pStmt(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stmt_;
  }
}
Stmt* pStmt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stmt_;
  }
}

static ListStmt* YY_RESULT_ListStmt_ = 0;
ListStmt* pListStmt(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStmt_;
  }
}
ListStmt* pListStmt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStmt_;
  }
}

static Jmp* YY_RESULT_Jmp_ = 0;
Jmp* pJmp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Jmp_;
  }
}
Jmp* pJmp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Jmp_;
  }
}

static Exp* YY_RESULT_Exp_ = 0;
Exp* pExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}
Exp* pExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}

static Type* YY_RESULT_Type_ = 0;
Type* pType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Program* program_;
  Function* function_;
  ListFunction* listfunction_;
  Declaration* declaration_;
  ListDeclaration* listdeclaration_;
  Stmt* stmt_;
  ListStmt* liststmt_;
  Jmp* jmp_;
  Exp* exp_;
  Type* type_;
}

%token _ERROR_
%token _SYMB_0    //   (
%token _SYMB_1    //   )
%token _SYMB_2    //   ,
%token _SYMB_3    //   {
%token _SYMB_4    //   }
%token _SYMB_5    //   =
%token _SYMB_6    //   ;
%token _SYMB_7    //   *
%token _SYMB_8    //   /
%token _SYMB_9    //   +
%token _SYMB_10    //   -
%token _SYMB_11    //   break
%token _SYMB_12    //   char
%token _SYMB_13    //   else
%token _SYMB_14    //   if
%token _SYMB_15    //   int
%token _SYMB_16    //   return
%token _SYMB_17    //   void
%token _SYMB_18    //   while

%type <program_> Program
%type <function_> Function
%type <listfunction_> ListFunction
%type <declaration_> Declaration
%type <listdeclaration_> ListDeclaration
%type <stmt_> Stmt
%type <liststmt_> ListStmt
%type <jmp_> Jmp
%type <exp_> Exp
%type <exp_> Exp1
%type <exp_> Exp2
%type <exp_> Exp3
%type <type_> Type

%start Program
%token<char_> _CHAR_
%token<int_> _INTEGER_
%token<string_> _IDENT_

%%
Program : ListFunction {  $$ = new Progr($1); YY_RESULT_Program_= $$; } 
;
Function : Type _IDENT_ _SYMB_0 ListDeclaration _SYMB_1 Stmt {  std::reverse($4->begin(),$4->end()) ;$$ = new Func($1, $2, $4, $6);  } 
;
ListFunction : /* empty */ {  $$ = new ListFunction();  } 
  | ListFunction Function {  $1->push_back($2) ; $$ = $1 ;  }
;
Declaration : Type _IDENT_ {  $$ = new Decl($1, $2);  } 
;
ListDeclaration : /* empty */ {  $$ = new ListDeclaration();  } 
  | Declaration {  $$ = new ListDeclaration() ; $$->push_back($1);  }
  | Declaration _SYMB_2 ListDeclaration {  $3->push_back($1) ; $$ = $3 ;  }
;
Stmt : _SYMB_3 ListStmt _SYMB_4 {  std::reverse($2->begin(),$2->end()) ;$$ = new SComp($2);  } 
  | _SYMB_14 _SYMB_0 Exp _SYMB_1 Stmt _SYMB_13 Stmt {  $$ = new SIfElse($3, $5, $7);  }
  | _SYMB_14 _SYMB_0 Exp _SYMB_1 Stmt {  $$ = new SIf($3, $5);  }
  | _SYMB_18 _SYMB_0 Exp _SYMB_1 Stmt {  $$ = new SWhile($3, $5);  }
  | Jmp {  $$ = new SJmp($1);  }
  | Declaration _SYMB_5 Exp _SYMB_6 {  $$ = new SDeclAss($1, $3);  }
  | Declaration _SYMB_6 {  $$ = new SDecl($1);  }
  | Exp _SYMB_6 {  $$ = new SExp($1);  }
  | _SYMB_3 _SYMB_4 {  $$ = new SEmptyComp();  }
  | _SYMB_6 {  $$ = new SEmpty();  }
;
ListStmt : Stmt {  $$ = new ListStmt() ; $$->push_back($1);  } 
  | Stmt ListStmt {  $2->push_back($1) ; $$ = $2 ;  }
;
Jmp : _SYMB_11 _SYMB_6 {  $$ = new SJmpBreak();  } 
  | _SYMB_16 Exp _SYMB_6 {  $$ = new SJmpRetExp($2);  }
  | _SYMB_16 _SYMB_6 {  $$ = new SJmpReturn();  }
;
Exp : _IDENT_ _SYMB_5 Exp1 {  $$ = new EAssign($1, $3);  } 
  | Exp1 {  $$ = $1;  }
;
Exp1 : Exp1 _SYMB_7 Exp2 {  $$ = new EMul($1, $3);  } 
  | Exp1 _SYMB_8 Exp2 {  $$ = new EDiv($1, $3);  }
  | Exp2 {  $$ = $1;  }
;
Exp2 : Exp2 _SYMB_9 Exp3 {  $$ = new EAdd($1, $3);  } 
  | Exp2 _SYMB_10 Exp3 {  $$ = new ESub($1, $3);  }
  | Exp3 {  $$ = $1;  }
;
Exp3 : _IDENT_ {  $$ = new EVar($1);  } 
  | _INTEGER_ {  $$ = new EInteger($1);  }
  | _CHAR_ {  $$ = new EChar($1);  }
  | _SYMB_0 Exp _SYMB_1 {  $$ = $2;  }
;
Type : _SYMB_17 {  $$ = new Tvoid();  } 
  | _SYMB_12 {  $$ = new Tchar();  }
  | _SYMB_15 {  $$ = new Tint();  }
;

