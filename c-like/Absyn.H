#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>
#include "llvm/IR/Value.h"
#include "llvm/IR/DerivedTypes.h"

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Program;
class Function;
class Declaration;
class Stmt;
class Jmp;
class Exp;
class Type;
class Progr;
class Func;
class Decl;
class SComp;
class SIfElse;
class SIf;
class SWhile;
class SJmp;
class SDeclAss;
class SDecl;
class SExp;
class SEmptyComp;
class SEmpty;
class SJmpBreak;
class SJmpRetExp;
class SJmpReturn;
class EAssign;
class EMul;
class EDiv;
class EAdd;
class ESub;
class EFuncParam;
class EFunc;
class EVar;
class EInteger;
class EChar;
class Tvoid;
class Tchar;
class Tint;
class ListFunction;
class ListDeclaration;
class ListStmt;
class ListIdent;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual llvm::Value *visitProgram(Program *p) = 0;
  virtual llvm::Value *visitFunction(Function *p) = 0;
  virtual llvm::Value *visitDeclaration(Declaration *p) = 0;
  virtual llvm::Value *visitStmt(Stmt *p) = 0;
  virtual llvm::Value *visitJmp(Jmp *p) = 0;
  virtual llvm::Value *visitExp(Exp *p) = 0;
  virtual llvm::Value *visitType(Type *p) = 0;
  virtual llvm::Value *visitProgr(Progr *p) = 0;
  virtual llvm::Value *visitFunc(Func *p) = 0;
  virtual llvm::Value *visitDecl(Decl *p) = 0;
  virtual llvm::Value *visitSComp(SComp *p) = 0;
  virtual llvm::Value *visitSIfElse(SIfElse *p) = 0;
  virtual llvm::Value *visitSIf(SIf *p) = 0;
  virtual llvm::Value *visitSWhile(SWhile *p) = 0;
  virtual llvm::Value *visitSJmp(SJmp *p) = 0;
  virtual llvm::Value *visitSDeclAss(SDeclAss *p) = 0;
  virtual llvm::Value *visitSDecl(SDecl *p) = 0;
  virtual llvm::Value *visitSExp(SExp *p) = 0;
  virtual llvm::Value *visitSEmptyComp(SEmptyComp *p) = 0;
  virtual llvm::Value *visitSEmpty(SEmpty *p) = 0;
  virtual llvm::Value *visitSJmpBreak(SJmpBreak *p) = 0;
  virtual llvm::Value *visitSJmpRetExp(SJmpRetExp *p) = 0;
  virtual llvm::Value *visitSJmpReturn(SJmpReturn *p) = 0;
  virtual llvm::Value *visitEAssign(EAssign *p) = 0;
  virtual llvm::Value *visitEMul(EMul *p) = 0;
  virtual llvm::Value *visitEDiv(EDiv *p) = 0;
  virtual llvm::Value *visitEAdd(EAdd *p) = 0;
  virtual llvm::Value *visitESub(ESub *p) = 0;
  virtual llvm::Value *visitEFuncParam(EFuncParam *p) = 0;
  virtual llvm::Value *visitEFunc(EFunc *p) = 0;
  virtual llvm::Value *visitEVar(EVar *p) = 0;
  virtual llvm::Value *visitEInteger(EInteger *p) = 0;
  virtual llvm::Value *visitEChar(EChar *p) = 0;
  virtual llvm::Type *visitTvoid(Tvoid *p) = 0;
  virtual llvm::Type  *visitTchar(Tchar *p) = 0;
  virtual llvm::Type  *visitTint(Tint *p) = 0;
  virtual llvm::Value *visitListFunction(ListFunction *p) = 0;
  virtual llvm::Value *visitListDeclaration(ListDeclaration *p) = 0;
  virtual llvm::Value *visitListStmt(ListStmt *p) = 0;
  virtual llvm::Value *visitListIdent(ListIdent *p) = 0;

  virtual llvm::Value *visitInteger(Integer x) = 0;
  virtual llvm::Value *visitChar(Char x) = 0;
  virtual llvm::Value *visitDouble(Double x) = 0;
  virtual llvm::Value *visitString(String x) = 0;
  virtual llvm::Value *visitIdent(Ident x) = 0;
};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class Function : public Visitable
{
public:
  virtual Function *clone() const = 0;

};

class Declaration : public Visitable
{
public:
  virtual Declaration *clone() const = 0;

};

class Stmt : public Visitable
{
public:
  virtual Stmt *clone() const = 0;

};

class Jmp : public Visitable
{
public:
  virtual Jmp *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class Type : public Visitable
{
public:
  virtual Type *clone() const = 0;

};



class Progr : public Program
{
public:
  ListFunction *listfunction_;

  Progr(const Progr &);
  Progr &operator=(const Progr &);
  Progr(ListFunction *p1);
  ~Progr();
  virtual void accept(Visitor *v);
  virtual Progr *clone() const;
  void swap(Progr &);
};

class Func : public Function
{
public:
  Type *type_;
  Ident ident_;
  ListDeclaration *listdeclaration_;
  Stmt *stmt_;

  Func(const Func &);
  Func &operator=(const Func &);
  Func(Type *p1, Ident p2, ListDeclaration *p3, Stmt *p4);
  ~Func();
  virtual void accept(Visitor *v);
  virtual Func *clone() const;
  void swap(Func &);
};

class Decl : public Declaration
{
public:
  Type *type_;
  Ident ident_;

  Decl(const Decl &);
  Decl &operator=(const Decl &);
  Decl(Type *p1, Ident p2);
  ~Decl();
  virtual void accept(Visitor *v);
  virtual Decl *clone() const;
  void swap(Decl &);
};

class SComp : public Stmt
{
public:
  ListStmt *liststmt_;

  SComp(const SComp &);
  SComp &operator=(const SComp &);
  SComp(ListStmt *p1);
  ~SComp();
  virtual void accept(Visitor *v);
  virtual SComp *clone() const;
  void swap(SComp &);
};

class SIfElse : public Stmt
{
public:
  Exp *exp_;
  Stmt *stmt_1;
  Stmt *stmt_2;

  SIfElse(const SIfElse &);
  SIfElse &operator=(const SIfElse &);
  SIfElse(Exp *p1, Stmt *p2, Stmt *p3);
  ~SIfElse();
  virtual void accept(Visitor *v);
  virtual SIfElse *clone() const;
  void swap(SIfElse &);
};

class SIf : public Stmt
{
public:
  Exp *exp_;
  Stmt *stmt_;

  SIf(const SIf &);
  SIf &operator=(const SIf &);
  SIf(Exp *p1, Stmt *p2);
  ~SIf();
  virtual void accept(Visitor *v);
  virtual SIf *clone() const;
  void swap(SIf &);
};

class SWhile : public Stmt
{
public:
  Exp *exp_;
  Stmt *stmt_;

  SWhile(const SWhile &);
  SWhile &operator=(const SWhile &);
  SWhile(Exp *p1, Stmt *p2);
  ~SWhile();
  virtual void accept(Visitor *v);
  virtual SWhile *clone() const;
  void swap(SWhile &);
};

class SJmp : public Stmt
{
public:
  Jmp *jmp_;

  SJmp(const SJmp &);
  SJmp &operator=(const SJmp &);
  SJmp(Jmp *p1);
  ~SJmp();
  virtual void accept(Visitor *v);
  virtual SJmp *clone() const;
  void swap(SJmp &);
};

class SDeclAss : public Stmt
{
public:
  Declaration *declaration_;
  Exp *exp_;

  SDeclAss(const SDeclAss &);
  SDeclAss &operator=(const SDeclAss &);
  SDeclAss(Declaration *p1, Exp *p2);
  ~SDeclAss();
  virtual void accept(Visitor *v);
  virtual SDeclAss *clone() const;
  void swap(SDeclAss &);
};

class SDecl : public Stmt
{
public:
  Declaration *declaration_;

  SDecl(const SDecl &);
  SDecl &operator=(const SDecl &);
  SDecl(Declaration *p1);
  ~SDecl();
  virtual void accept(Visitor *v);
  virtual SDecl *clone() const;
  void swap(SDecl &);
};

class SExp : public Stmt
{
public:
  Exp *exp_;

  SExp(const SExp &);
  SExp &operator=(const SExp &);
  SExp(Exp *p1);
  ~SExp();
  virtual void accept(Visitor *v);
  virtual SExp *clone() const;
  void swap(SExp &);
};

class SEmptyComp : public Stmt
{
public:

  SEmptyComp(const SEmptyComp &);
  SEmptyComp &operator=(const SEmptyComp &);
  SEmptyComp();
  ~SEmptyComp();
  virtual void accept(Visitor *v);
  virtual SEmptyComp *clone() const;
  void swap(SEmptyComp &);
};

class SEmpty : public Stmt
{
public:

  SEmpty(const SEmpty &);
  SEmpty &operator=(const SEmpty &);
  SEmpty();
  ~SEmpty();
  virtual void accept(Visitor *v);
  virtual SEmpty *clone() const;
  void swap(SEmpty &);
};

class SJmpBreak : public Jmp
{
public:

  SJmpBreak(const SJmpBreak &);
  SJmpBreak &operator=(const SJmpBreak &);
  SJmpBreak();
  ~SJmpBreak();
  virtual void accept(Visitor *v);
  virtual SJmpBreak *clone() const;
  void swap(SJmpBreak &);
};

class SJmpRetExp : public Jmp
{
public:
  Exp *exp_;

  SJmpRetExp(const SJmpRetExp &);
  SJmpRetExp &operator=(const SJmpRetExp &);
  SJmpRetExp(Exp *p1);
  ~SJmpRetExp();
  virtual void accept(Visitor *v);
  virtual SJmpRetExp *clone() const;
  void swap(SJmpRetExp &);
};

class SJmpReturn : public Jmp
{
public:

  SJmpReturn(const SJmpReturn &);
  SJmpReturn &operator=(const SJmpReturn &);
  SJmpReturn();
  ~SJmpReturn();
  virtual void accept(Visitor *v);
  virtual SJmpReturn *clone() const;
  void swap(SJmpReturn &);
};

class EAssign : public Exp
{
public:
  Ident ident_;
  Exp *exp_;

  EAssign(const EAssign &);
  EAssign &operator=(const EAssign &);
  EAssign(Ident p1, Exp *p2);
  ~EAssign();
  virtual void accept(Visitor *v);
  virtual EAssign *clone() const;
  void swap(EAssign &);
};

class EMul : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EMul(const EMul &);
  EMul &operator=(const EMul &);
  EMul(Exp *p1, Exp *p2);
  ~EMul();
  virtual void accept(Visitor *v);
  virtual EMul *clone() const;
  void swap(EMul &);
};

class EDiv : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EDiv(const EDiv &);
  EDiv &operator=(const EDiv &);
  EDiv(Exp *p1, Exp *p2);
  ~EDiv();
  virtual void accept(Visitor *v);
  virtual EDiv *clone() const;
  void swap(EDiv &);
};

class EAdd : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EAdd(const EAdd &);
  EAdd &operator=(const EAdd &);
  EAdd(Exp *p1, Exp *p2);
  ~EAdd();
  virtual void accept(Visitor *v);
  virtual EAdd *clone() const;
  void swap(EAdd &);
};

class ESub : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ESub(const ESub &);
  ESub &operator=(const ESub &);
  ESub(Exp *p1, Exp *p2);
  ~ESub();
  virtual void accept(Visitor *v);
  virtual ESub *clone() const;
  void swap(ESub &);
};

class EFuncParam : public Exp
{
public:
    Ident ident_;
    ListIdent *listident_;

    EFuncParam(const EFuncParam &);
    EFuncParam &operator=(const EFuncParam &);
    EFuncParam(Ident p1, ListIdent *p2);
    ~EFuncParam();
    virtual void accept(Visitor *v);
    virtual EFuncParam *clone() const;
    void swap(EFuncParam &);
};

class EFunc : public Exp
{
public:
    Ident ident_;

    EFunc(const EFunc &);
    EFunc &operator=(const EFunc &);
    EFunc(Ident p1);
    ~EFunc();
    virtual void accept(Visitor *v);
    virtual EFunc *clone() const;
    void swap(EFunc &);
};

class EVar : public Exp
{
public:
  Ident ident_;

  EVar(const EVar &);
  EVar &operator=(const EVar &);
  EVar(Ident p1);
  ~EVar();
  virtual void accept(Visitor *v);
  virtual EVar *clone() const;
  void swap(EVar &);
};

class EInteger : public Exp
{
public:
  Integer integer_;

  EInteger(const EInteger &);
  EInteger &operator=(const EInteger &);
  EInteger(Integer p1);
  ~EInteger();
  virtual void accept(Visitor *v);
  virtual EInteger *clone() const;
  void swap(EInteger &);
};

class EChar : public Exp
{
public:
  Char char_;

  EChar(const EChar &);
  EChar &operator=(const EChar &);
  EChar(Char p1);
  ~EChar();
  virtual void accept(Visitor *v);
  virtual EChar *clone() const;
  void swap(EChar &);
};

class Tvoid : public Type
{
public:

  Tvoid(const Tvoid &);
  Tvoid &operator=(const Tvoid &);
  Tvoid();
  ~Tvoid();
  virtual void accept(Visitor *v);
  virtual Tvoid *clone() const;
  void swap(Tvoid &);
};

class Tchar : public Type
{
public:

  Tchar(const Tchar &);
  Tchar &operator=(const Tchar &);
  Tchar();
  ~Tchar();
  virtual void accept(Visitor *v);
  virtual Tchar *clone() const;
  void swap(Tchar &);
};

class Tint : public Type
{
public:

  Tint(const Tint &);
  Tint &operator=(const Tint &);
  Tint();
  ~Tint();
  virtual void accept(Visitor *v);
  virtual Tint *clone() const;
  void swap(Tint &);
};



class ListFunction : public Visitable, public std::vector<Function*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListFunction *clone() const;
};

class ListDeclaration : public Visitable, public std::vector<Declaration*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDeclaration *clone() const;
};

class ListStmt : public Visitable, public std::vector<Stmt*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStmt *clone() const;
};

class ListIdent : public Visitable, public std::vector<Ident>
{
public:
    virtual void accept(Visitor *v);
    virtual ListIdent *clone() const;
};



#endif
