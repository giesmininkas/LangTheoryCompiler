entrypoints Program ;

Progr.      Program ::= [Function] ; 

FuncProto.  Function ::= Type Ident "(" [Declaration] ")" ";" ;
Func.       Function ::= Type Ident "(" [Declaration] ")" "{" [Stmt] "}" ;
terminator  Function "" ;

Decl.       Declaration ::= Type Ident ;
separator   Declaration "," ;


SComp.      Stmt ::= "{" [Stmt] "}" ;
SIf.        Stmt ::= "if" "(" Exp ")" Stmt ;
SIfElse.    Stmt ::= "if" "(" Exp ")" Stmt "else" Stmt ;
SWhile.     Stmt ::= "while" "(" Exp ")" Stmt ;
SJmp.       Stmt ::= Jmp ;
SDeclAss.   Stmt ::= Declaration "=" Exp ";" ;
SDecl.      Stmt ::= Declaration ";" ;
SExp.       Stmt ::= Exp ";" ;
SEmptyComp. Stmt ::= "{" "}" ;
SEmpty.     Stmt ::= ";" ;

(:[]).      [Stmt] ::= Stmt ;
(:).        [Stmt] ::= Stmt [Stmt] ;

SJmpBreak.  Jmp  ::= "break" ";" ;
SJmpRetExp. Jmp  ::= "return" Exp ";" ;
SJmpReturn. Jmp  ::= "return" ";" ;

EAssign.    Exp  ::= Ident "=" Exp1 ;
EAdd.       Exp1 ::= Exp1 "+" Exp2 ;
ESub.       Exp1 ::= Exp1 "-" Exp2 ;
EMod.       Exp2 ::= Exp2 "%" Exp3 ;
EMul.       Exp2 ::= Exp2 "*" Exp3 ;
EDiv.       Exp2 ::= Exp2 "/" Exp3 ;
EFuncParam. Exp3 ::= Ident "(" [Exp1] ")" ;
EVar.       Exp3 ::= Ident ;
EInteger.   Exp3 ::= Integer ;
EChar.      Exp3 ::= Char ;
separator Exp1 "," ;

_.          Exp3  ::= "(" Exp ")" ;
_.          Exp2 ::= Exp3 ;
_.          Exp1 ::= Exp2 ;
_.          Exp  ::= Exp1 ;

Tvoid.      Type ::= "void";
Tchar.      Type ::= "char";
Tint.       Type ::= "int";

comment "/*" "*/" ;
comment "//";
comment "#";
